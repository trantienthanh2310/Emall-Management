@section SideBar {
    @await Component.InvokeAsync("SideBar", new { activeItem = "products" });
}
﻿﻿<h4 class="font-weight-bolder text-center">Add Product</h4>
<hr />
<form id="product-form" enctype="multipart/form-data" method="post">
    <div class="row justify-content-center">
        <div class="col-5 ">
            <div class="dropzone-previews"></div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" id="input-name" name="input-name">
            </div>
            <div class="form-group mb-3">
                <label class="form-label">Category</label>
                <select class="form-select" aria-label="Default select example" id="input-category" name="input-category">
                    <option selected="selected">Select category</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <label class="form-label">Description</label>
                <input type="text" class="form-control" id="input-description" name="input-description">
            </div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Quantity</label>
                <input type="text" class="form-control number-only" id="input-quantity" name="input-quantity">
            </div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Price</label>
                <input type="text" class="form-control real-only" id="input-price" name="input-price">
            </div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Discount</label>
                <input type="text" class="form-control real-only" id="input-discount" name="input-discount">
            </div>
            <div class="form-group mb-3">
                <label class="form-label">Images</label>
                <div class="dropzone dz-clickable mb-3" id="file-section" style="border-radius: 10px" action="#">
                    <div class="dz-default dz-message" data-dz-message="">
                        <span>Drop images here to upload</span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <button class="btn bg-gradient-primary-dark my-shadow text-white" id="btn-submit" type="submit">Add</button>
                <a href="product" class="text-white btn btn-danger" style="float: right">Cancel</a>
            </div>
            <p id="demo"></p>
        </div>
    </div>
</form>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/ujug8dr0hmmvp4fgdgm2uam16w1mov8slqh4y5ld7h7hgr6p/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.3/dist/jquery.validate.min.js"></script>
    <script src="@Url.Content("~/assets/shop-owner/js/internal/validation.js")"></script>
    <script>
        Dropzone.autoDiscover = false;
        toastr.options.closeButton = true;
        $(function () {
            let classNames = ['active'];
            $('#nav-item-product').addClass(classNames).css('background-color', '#2f9db6');
            $('#input-search').parent().remove();
            tinymce.init({
                selector: '#input-description'
            });
            let defaultCategory = getDefaultCategory();

            let acceptedMimeTypes = ['image/jpeg', 'image/jpg', 'image/png'];
            const acceptedMaxBytes = 4 * 1024 * 1024;
            let remainingBytes = acceptedMaxBytes;
            let dropzone = new Dropzone('div#file-section', {
                maxFilesize: 1,
                paramName: 'files',
                maxFiles: 5,
                filesizeBase: 1024,
                autoProcessQueue: false,
                uploadMultiple: true,
                acceptedFiles: acceptedMimeTypes.join(','),
                addRemoveLinks: true
            });
            dropzone.on('addedfile', function (file) {
                let maxFileNumber = this.options.maxFiles;
                let maxFileSize = this.options.maxFilesize;
                let uploadedFileSizeInMb = file.size / (1024 * 1024);
                if (this.files.length > this.options.maxFiles) {
                    this.removeFile(file);
                    toastr.error('Max file number exceeded!', 'File is rejected');
                } else if (!acceptedMimeTypes.includes(file.type)) {
                    this.removeFile(file);
                    toastr.error('You can\'t upload this type of file!', 'File is rejected');
                } else if (uploadedFileSizeInMb > maxFileSize) {
                    this.removeFile(file);
                    toastr.error(`${uploadedFileSizeInMb.toFixed(2)} MB file is too big to upload!`, 'File is rejected');
                } else if (file.size > remainingBytes) {
                    this.removeFile(file);
                    toastr.error('Maximum file size exceeded!', 'File is rejected');
                } else {
                    remainingBytes -= file.size;
                }
            });
            $('#btn-submit').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (dropzone.files.length < 2) {
                    toastr.error('You must upload at least 2 pictures!', 'Error');
                    return;
                }
                let animationLoader = new AnimationLoader('#loading-container > #animation-container', '/assets/shop-owner/img/illustrations/loading.json');
                animationLoader.showAnimation();
                let formData = new FormData();
                let requestModelObject = buildRequestModel();
                Object.keys(requestModelObject).forEach(key => {
                    formData.append(`requestModel.${key}`, requestModelObject[key]);
                });
                for (let i = 0; i < dropzone.files.length; i++)
                    formData.append(`images[${i}]`, dropzone.files[i]);
                getShopId()
                    .then(shopId => {
                        addProduct(formData, shopId).then(() => {
                            animationLoader.hideAnimation();
                            window.location.href = '/shopowner/' + (defaultCategory ? 'category' : 'product');
                        }).catch(error => {
                            animationLoader.hideAnimation();
                            toastr.error(error, 'Error');
                        });
                    });
            });
            let animationLoader = new AnimationLoader('#loading-container > #animation-container', '/assets/shop-owner/img/illustrations/loading.json');
            animationLoader.showAnimation(3500);
            getAllCategories()
                .then(categories => {
                    renderCategoryDropdown(categories);
                    if (defaultCategory)
                        $(`#input-category option[value=${defaultCategory}]`).prop('selected', true);
                    animationLoader.hideAnimation();
                })
                .catch(error => {
                    animationLoader.hideAnimation();
                    toastr.error('Failed to load list categories', 'Error');
                });
        });

        function buildRequestModel() {
            let name = $("#input-name").val();
            let categoryId = $('#input-category').val();
            let categoryName = $('#input-category option:selected').text();
            let description = tinymce.activeEditor.getContent({ format: 'text' });
            let quantity = $("#input-quantity").val();
            let price = $("#input-price").val();
            let discount = $("#input-discount").val();

            return {
                productName: name,
                categoryId: categoryId,
                categoryName: categoryName,
                description: description,
                quantity: quantity,
                price: price,
                discount: discount || 0
            };
        }

        
        function getDefaultCategory() {
            let url = new URL(window.location.href);
            let queryObj = url.searchParams;
            let category = queryObj.get('category') ? parseInt(queryObj.get('category')) : undefined;
            return category;
        }
    </script>
}
@section SideBar {
    @await Component.InvokeAsync("SideBar", new { activeItem = "products" });
}
<h4 class="font-weight-bolder text-center">Edit Product</h4>
<hr />
<form id="product-form" enctype="multipart/form-data" method="post">
    <div class="row justify-content-center">
        <div class="col-5">
            <input type="hidden" id="input-id" />
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Product name</label>
                <input class="form-control" type="text" id="input-name" />
            </div>
            <div class="form-group mb-3">
                <label class="form-label">Category</label>
                <select class="form-select" aria-label="Default select example" id="input-category">
                    <option selected="selected">Select category</option>
                </select>
            </div>
            <div class="form-group mb-3">
                <label class="form-label">Description</label>
                <input type="text" class="form-control" id="input-description" name="input-description">
            </div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Price</label>
                <input class="form-control real-only" type="number" id="input-price" />
            </div>
            <div class="input-group input-group-outline mb-3">
                <label class="form-label">Discount</label>
                <input class="form-control real-only" type="text" id="input-discount" />
            </div>
            <input type="hidden" id="input-oldFilesName" />
            <div class="form-group mb-3">
                <label class="form-label">Images</label>
                <div class="dropzone dz-clickable mb-3" id="file-section" style="border-radius: 10px" action="#">
                    <div class="dz-default dz-message" data-dz-message="">
                        <span>Drop images here to upload</span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <button class="btn bg-gradient-primary-dark my-shadow text-white" id="btn-submit" type="submit">Update</button>
                <a href="#" class="text-white btn btn-danger" style="float: right">Cancel</a>
            </div>
        </div>
    </div>
</form>

@section Scripts {
<script src="https://cdn.tiny.cloud/1/ujug8dr0hmmvp4fgdgm2uam16w1mov8slqh4y5ld7h7hgr6p/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
<script>
    Dropzone.autoDiscover = false;
    const edittingProduct = JSON.parse(window.localStorage.getItem('editting-product'));
    $(function () {
        let classNames = ['active', 'bg-gradient-primary'];
        $('#nav-item-product').addClass(classNames);
        $('#input-search').parent().remove();
        let animationLoader = new AnimationLoader('#loading-container > #animation-container', '/assets/shop-owner/img/illustrations/loading.json');
        animationLoader.showAnimation(3500);
        getAllCategories()
            .then(categories => {
                onLoadedAllCategories(categories);
                $('.btn-danger').click(function(e) {
                    e.preventDefault();
                    history.back();
                });
                animationLoader.hideAnimation();
            })
            .catch(error => {
                animationLoader.hideAnimation();
                toastr.error('Failed to load list categories', 'Error');
            });
    });

    function onLoadedAllCategories(categories) {
        console.log(categories);
        renderCategoryDropdown(categories);
        tinymce.init({
            selector: '#input-description'
        });
        let acceptedMimeTypes = ['image/jpeg', 'image/jpg', 'image/png'];
        const acceptedMaxBytes = 4 * 1024 * 1024;
        let remainingBytes = acceptedMaxBytes;
        let dropzone = new Dropzone('div#file-section', {
            maxFilesize: 1,
            paramName: 'files',
            maxFiles: 5,
            filesizeBase: 1024,
            autoProcessQueue: false,
            uploadMultiple: true,
            acceptedFiles: acceptedMimeTypes.join(','),
            addRemoveLinks: true
        });
        dropzone.on('addedfile', function (file) {
            let maxFileNumber = this.options.maxFiles;
            let maxFileSize = this.options.maxFilesize;
            let uploadedFileSizeInMb = file.size / (1024 * 1024);
            if (this.files.length > this.options.maxFiles) {
                this.removeFile(file);
                toastr.error('Max file number exceeded!', 'File is rejected');
            } else if (!acceptedMimeTypes.includes(file.type)) {
                this.removeFile(file);
                toastr.error('You can\'t upload this type of file!', 'File is rejected');
            } else if (uploadedFileSizeInMb > maxFileSize) {
                this.removeFile(file);
                toastr.error(`${uploadedFileSizeInMb.toFixed(2)} MB file is too big to upload!`, 'File is rejected');
            } else if (file.size > remainingBytes) {
                this.removeFile(file);
                toastr.error('Maximum file size exceeded!', 'File is rejected');
            } else {
                remainingBytes -= file.size;
            }
        });
        loadEdittingProduct(edittingProduct, dropzone);
        $('#btn-submit').click(e => {
            e.preventDefault();
            if (dropzone.files.length < 2) {
                toastr.error('You must upload at least 2 pictures!', 'Error');
                return;
            }
            let animationLoader = new AnimationLoader('#loading-container > #animation-container', '/assets/shop-owner/img/illustrations/loading.json');
            animationLoader.showAnimation();
            let formData = new FormData();
            var requestModelObject = buildRequestModel();
            Object.keys(requestModelObject).forEach(key => {
                formData.append(`requestModel.${key}`, requestModelObject[key]);
            });
            for (let i = 0; i < edittingProduct.images.length; i++)
                formData.append(`requestModel.imagePaths[${i}]`, edittingProduct.images[i]);
            for (let i = 0; i < dropzone.files.length; i++)
                formData.append(`images[${i}]`, dropzone.files[i]);
            editProduct(edittingProduct.id, formData).then(() => {
                animationLoader.hideAnimation();
                window.location.href = '/shopowner/product';
                window.localStorage.removeItem('editting-product');
            }).catch(error => {
                animationLoader.hideAnimation();
                toastr.error(error, 'Error');
            });
        });
    }

    function loadEdittingProduct(edittingProduct, dropzone) {
        if (!edittingProduct) {
            alert("Something went wrong!");
            window.location.href = "/shopowner/product";
        }
        $('#input-id').val(edittingProduct.id);
        $('#input-name').val(edittingProduct.productName);
        $(`#input-category option:contains(${edittingProduct.categoryName})`).attr('selected', true);
        $('#input-description').val(edittingProduct.description);
        $('#input-price').val(edittingProduct.price);
        $('#input-discount').val(edittingProduct.discount);
        edittingProduct.images.forEach(imageUrl => getProductImage(imageUrl).then(blob => {
            let file = new File([blob], blob.name, { type: blob.type });
            dropzone.addFile(file); 
        }));
        $('.input-group-outline').addClass('is-filled');
    }
    function buildRequestModel() {
        let id = $('#input-id').val();
        let name = $('#input-name').val();
        let categoryId = $('#input-category').val();
        let categoryName = $('#input-category option:selected').text();
        let description = tinymce.activeEditor.getContent({ format: 'text' });
        let price = $('#input-price').val();
        let discount = $('#input-discount').val();
        return {
            productName: name,
            categoryId: categoryId,
            categoryName: categoryName,
            description: description,
            price: price,
            discount: discount || 0
        };
    }
</script>
}
